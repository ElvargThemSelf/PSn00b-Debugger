// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "SettingsUI.h"

void SettingsUI::cb_Cancel_i(Fl_Button*, void*) {
  hide();
}
void SettingsUI::cb_Cancel(Fl_Button* o, void* v) {
  ((SettingsUI*)(o->parent()))->cb_Cancel_i(o,v);
}
SettingsUI::SettingsUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _SettingsUI();
}

SettingsUI::SettingsUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _SettingsUI();
}

SettingsUI::SettingsUI()
  : Fl_Double_Window(0, 0, 400, 250, "Debugger Settings") {
  clear_flag(16);
  _SettingsUI();
}

void SettingsUI::_SettingsUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fl_Button* o = new Fl_Button(257, 220, 64, 20, "Ok");
  o->tooltip("cb_SettingsOk");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_SettingsOkay);
} // Fl_Button* o
{ Fl_Button* o = new Fl_Button(326, 220, 64, 20, "Cancel");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_Cancel);
} // Fl_Button* o
{ Fl_Tabs* o = new Fl_Tabs(10, 10, 380, 200);
  { Fl_Group* o = new Fl_Group(10, 30, 380, 180, "General");
    o->labelsize(12);
    { loadSymbolsCheck = new Fl_Check_Button(20, 40, 365, 15, "Always load symbols file when selecting PS-EXE");
      loadSymbolsCheck->tooltip("Loads a symbols file if available without asking.");
      loadSymbolsCheck->down_box(FL_DOWN_BOX);
      loadSymbolsCheck->labelsize(12);
    } // Fl_Check_Button* loadSymbolsCheck
    { autoMinimizeCheck = new Fl_Check_Button(20, 60, 365, 15, "Automatically minimize child windows");
      autoMinimizeCheck->tooltip("Minimize child windows when main window is minimized.");
      autoMinimizeCheck->down_box(FL_DOWN_BOX);
      autoMinimizeCheck->labelsize(12);
    } // Fl_Check_Button* autoMinimizeCheck
    { updateIntValue = new Fl_Spinner(132, 179, 40, 21, "Auto-update Interval");
      updateIntValue->tooltip("Specifies the update interval in secondsfor  interval update. Fractional valu\
es are accepted.");
      updateIntValue->type(1);
      updateIntValue->labelsize(12);
      updateIntValue->minimum(0.1);
      updateIntValue->maximum(10);
      updateIntValue->step(0.5);
      updateIntValue->value(0.5);
      updateIntValue->textsize(12);
    } // Fl_Spinner* updateIntValue
    o->end();
  } // Fl_Group* o
  { Fl_Group* o = new Fl_Group(10, 30, 380, 180, "Fonts");
    o->labelsize(12);
    o->hide();
    { Fl_Group* o = new Fl_Group(20, 55, 360, 35, "Registers");
      o->box(FL_ENGRAVED_BOX);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { regsFontList = new Fl_Choice(56, 60, 229, 25, "Font");
        regsFontList->down_box(FL_BORDER_BOX);
        regsFontList->labelsize(12);
        regsFontList->textsize(12);
      } // Fl_Choice* regsFontList
      { regsFontSize = new Fl_Spinner(318, 60, 57, 25, "Size");
        regsFontSize->labelsize(12);
        regsFontSize->minimum(4);
        regsFontSize->maximum(24);
        regsFontSize->value(12);
        regsFontSize->textsize(12);
      } // Fl_Spinner* regsFontSize
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(20, 109, 360, 36, "Disassembly");
      o->box(FL_ENGRAVED_BOX);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { asmFontList = new Fl_Choice(56, 115, 229, 25, "Font");
        asmFontList->down_box(FL_BORDER_BOX);
        asmFontList->labelsize(12);
        asmFontList->textsize(12);
      } // Fl_Choice* asmFontList
      { asmFontSize = new Fl_Spinner(318, 115, 57, 25, "Size");
        asmFontSize->labelsize(12);
        asmFontSize->minimum(4);
        asmFontSize->maximum(24);
        asmFontSize->value(12);
        asmFontSize->textsize(12);
      } // Fl_Spinner* asmFontSize
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Group* o
  { Fl_Group* o = new Fl_Group(10, 30, 380, 180, "Communications");
    o->labelsize(12);
    o->hide();
    { Fl_Group* o = new Fl_Group(20, 55, 365, 40, "Communication");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { serialChoice = new Fl_Input_Choice(90, 64, 285, 21, "Serial Port");
        serialChoice->labelsize(12);
        serialChoice->textsize(12);
      } // Fl_Input_Choice* serialChoice
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Group* o
  { Fl_Group* o = new Fl_Group(10, 30, 380, 180, "Debugging");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    o->hide();
    { bpcBreakToggle = new Fl_Check_Button(20, 40, 365, 15, "Pause program at entrypoint");
      bpcBreakToggle->tooltip("Sets a breakpoint at the program\'s entrypoint before execution.");
      bpcBreakToggle->down_box(FL_DOWN_BOX);
      bpcBreakToggle->labelsize(12);
    } // Fl_Check_Button* bpcBreakToggle
    { ramExpEnable = new Fl_Check_Button(20, 60, 215, 15, "Expansion RAM access");
      ramExpEnable->tooltip("Enables access to expansion region 3 starting at 0x1FA00000, intented for a R\
AM expansion cartridge for the Parallel I/O port. Memory control registers on \
the console side must be configured first before accessing.");
      ramExpEnable->down_box(FL_DOWN_BOX);
      ramExpEnable->labelsize(12);
      ramExpEnable->callback((Fl_Callback*)cb_SettingsExpToggle);
    } // Fl_Check_Button* ramExpEnable
    { ramExpSize = new Fl_Value_Input(326, 60, 59, 15, "RAM Size (KB)");
      ramExpSize->tooltip("Specifies the size of the installed RAM expansion.");
      ramExpSize->labelsize(12);
      ramExpSize->textsize(12);
      ramExpSize->deactivate();
    } // Fl_Value_Input* ramExpSize
    { ram8mbEnable = new Fl_Check_Button(20, 80, 365, 15, "8MB RAM access");
      ram8mbEnable->tooltip("Enables access beyond the 2MB of RAM for consoles with 8MB equipped. If conso\
le does not have 8MB the first 2MB is mirrored.");
      ram8mbEnable->down_box(FL_DOWN_BOX);
      ram8mbEnable->labelsize(12);
    } // Fl_Check_Button* ram8mbEnable
    { Fl_Group* o = new Fl_Group(21, 155, 364, 40, "Debug Patch File (for LITELOAD 1.1 or newer)");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { patchFileToggle = new Fl_Light_Button(30, 165, 63, 20, "Enable");
        patchFileToggle->callback((Fl_Callback*)cb_SettingsPatchToggle);
      } // Fl_Light_Button* patchFileToggle
      { patchGroup = new Fl_Group(95, 164, 279, 21);
        patchGroup->deactivate();
        { patchFileInput = new Fl_Input(102, 164, 239, 21);
          patchFileInput->labelsize(12);
          patchFileInput->textsize(12);
        } // Fl_Input* patchFileInput
        { Fl_Button* o = new Fl_Button(349, 165, 25, 20, "...");
          o->callback((Fl_Callback*)cb_SettingsBrowsePatch);
        } // Fl_Button* o
        patchGroup->end();
      } // Fl_Group* patchGroup
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Group* o
  o->end();
} // Fl_Tabs* o
set_modal();
xclass("psdebug.settings");
end();
}
