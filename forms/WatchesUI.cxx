// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "WatchesUI.h"
WatchesUI::WatchesUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _WatchesUI();
}

WatchesUI::WatchesUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _WatchesUI();
}

WatchesUI::WatchesUI()
  : Fl_Double_Window(0, 0, 400, 150, "Watches") {
  clear_flag(16);
  _WatchesUI();
}

void WatchesUI::_WatchesUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ watchTable = new Fl_WatchTable(5, 20, 390, 125, "Watches");
  watchTable->box(FL_THIN_DOWN_FRAME);
  watchTable->color(FL_BACKGROUND_COLOR);
  watchTable->selection_color(FL_BACKGROUND_COLOR);
  watchTable->labeltype(FL_NORMAL_LABEL);
  watchTable->labelfont(0);
  watchTable->labelsize(12);
  watchTable->labelcolor(FL_FOREGROUND_COLOR);
  watchTable->callback((Fl_Callback*)cb_WatchTable);
  watchTable->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  watchTable->when(FL_WHEN_RELEASE);
  watchTable->end();
  Fl_Group::current()->resizable(watchTable);
} // Fl_WatchTable* watchTable
{ Fl_Group* o = new Fl_Group(5, 5, 390, 15);
  { updateButton = new Fl_Button(345, 5, 50, 15, "Update");
    updateButton->labelsize(10);
    updateButton->callback((Fl_Callback*)cb_WatchUpdate);
  } // Fl_Button* updateButton
  { Fl_Group* o = new Fl_Group(5, 5, 15, 15);
    o->end();
    Fl_Group::current()->resizable(o);
  } // Fl_Group* o
  o->end();
} // Fl_Group* o
xclass("psdebug.watch");
end();
}
DataBreakUI::DataBreakUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _DataBreakUI();
}

DataBreakUI::DataBreakUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _DataBreakUI();
}

DataBreakUI::DataBreakUI()
  : Fl_Double_Window(0, 0, 285, 150, "Data Breakpoint") {
  clear_flag(16);
  _DataBreakUI();
}

void DataBreakUI::_DataBreakUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ breakAddrInput = new Fl_Input(10, 25, 175, 21, "Address/Symbol Name");
  breakAddrInput->labelsize(12);
  breakAddrInput->textsize(12);
  breakAddrInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  breakAddrInput->window()->hotspot(breakAddrInput);
} // Fl_Input* breakAddrInput
{ breakMaskInput = new Fl_Input(10, 66, 175, 21, "Address Mask");
  breakMaskInput->labelsize(12);
  breakMaskInput->textsize(12);
  breakMaskInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
} // Fl_Input* breakMaskInput
{ Fl_Group* o = new Fl_Group(10, 107, 175, 33, "Break on");
  o->box(FL_ENGRAVED_BOX);
  o->labelsize(12);
  o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  { readToggle = new Fl_Check_Button(15, 115, 79, 15, "Read");
    readToggle->down_box(FL_DOWN_BOX);
    readToggle->labelsize(12);
  } // Fl_Check_Button* readToggle
  { writeToggle = new Fl_Check_Button(99, 115, 79, 15, "Write");
    writeToggle->down_box(FL_DOWN_BOX);
    writeToggle->labelsize(12);
  } // Fl_Check_Button* writeToggle
  o->end();
} // Fl_Group* o
{ Fl_Button* o = new Fl_Button(195, 53, 80, 21, "Clear point");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_BreakClear);
} // Fl_Button* o
{ Fl_Return_Button* o = new Fl_Return_Button(195, 25, 80, 21, "Set point");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_BreakSet);
} // Fl_Return_Button* o
{ Fl_Button* o = new Fl_Button(195, 81, 80, 21, "Cancel");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_BreakCancel);
} // Fl_Button* o
set_modal();
xclass("psdebug.breakprompt");
end();
}

Fl_Menu_Item SetWatchUI::menu_typeChoice[] = {
 {"char (1 byte)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"short (2 bytes)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"int (4 bytes)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};
SetWatchUI::SetWatchUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _SetWatchUI();
}

SetWatchUI::SetWatchUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _SetWatchUI();
}

SetWatchUI::SetWatchUI()
  : Fl_Double_Window(0, 0, 285, 120, "Add Watch") {
  clear_flag(16);
  _SetWatchUI();
}

void SetWatchUI::_SetWatchUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ addrInput = new Fl_Input(10, 25, 175, 21, "Address/Symbol Name");
  addrInput->labelsize(12);
  addrInput->textsize(12);
  addrInput->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  addrInput->window()->hotspot(addrInput);
} // Fl_Input* addrInput
{ typeChoice = new Fl_Choice(10, 66, 175, 20, "Type");
  typeChoice->down_box(FL_BORDER_BOX);
  typeChoice->labelsize(12);
  typeChoice->textsize(12);
  typeChoice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  typeChoice->menu(menu_typeChoice);
} // Fl_Choice* typeChoice
{ unsignedCheck = new Fl_Check_Button(10, 91, 80, 15, "Unsigned");
  unsignedCheck->down_box(FL_DOWN_BOX);
  unsignedCheck->labelsize(12);
} // Fl_Check_Button* unsignedCheck
{ hexCheck = new Fl_Check_Button(95, 91, 50, 15, "Hex");
  hexCheck->down_box(FL_DOWN_BOX);
  hexCheck->labelsize(12);
} // Fl_Check_Button* hexCheck
{ Fl_Return_Button* o = new Fl_Return_Button(195, 25, 80, 21, "Okay");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_WatchOkay);
} // Fl_Return_Button* o
{ Fl_Button* o = new Fl_Button(195, 53, 80, 21, "Cancel");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_WatchCancel);
} // Fl_Button* o
set_modal();
xclass("psdebug.watchprompt");
end();
}
